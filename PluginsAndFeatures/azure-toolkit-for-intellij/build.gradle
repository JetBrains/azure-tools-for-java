buildscript {
    repositories {
        maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
        maven { url "https://cache-redirector.jetbrains.com/maven-central" }
    }
}

plugins {
    id "org.jetbrains.intellij" version "${gradle_plugin_version}"
    id "org.jetbrains.kotlin.jvm" version "${kotlin_version}"
    id "de.undercouch.download" version "4.0.1"
}

configurations {
    compile.exclude module: 'slf4j-api'
    compile.exclude module: 'log4j'
}

dependencies {
    compile fileTree(dir: '../AddLibrary/AzureLibraries/com.microsoft.azuretools.sdk/dependencies', include: ['applicationinsights-management-1.0.3.jar'])
    compile 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8'
    compile 'commons-io:commons-io:2.5'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile 'net.minidev:json-smart:2.3'
    compile 'com.microsoft.azure:azure-client-runtime:1.6.13', { force = true }
    compile 'com.microsoft.azure:azure-client-authentication:1.6.13', { force = true }
    compile 'com.microsoft.azuretools:azuretools-core:3.35.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azuretools:azure-explorer-common:3.35.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azuretools:hdinsight-node-common:3.35.0', {
        exclude group: "com.microsoft.azure", module: "azure-client-authentication"
        exclude group: "com.microsoft.azure", module: "azure-client-runtime"
        exclude group: "javax.xml.bind", module: "jaxb-api"
    }
    compile 'com.microsoft.azure:azure-tools-common:0.1.0', {
        exclude group: "com.google.guava", module: "guava"
        exclude group: "commons-io", module: "commons-io"
    }
    compile 'com.spotify:docker-client:8.11.7'
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.2'

    testImplementation "org.assertj:assertj-core:${assertj_version}"
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'java'

    repositories {
        maven { url new File(rootProject.projectDir, '../../.repository').toURI() } // to snap to the private maven repo on Jenkins if any
        mavenLocal()
        mavenCentral()
        maven { url 'https://cache-redirector.jetbrains.com/intellij-repository/snapshots' }
        maven { url 'https://cache-redirector.jetbrains.com/maven-central' }
    }

    sourceSets {
        main {
            java.srcDirs 'src'
            kotlin.srcDirs 'src'
            resources.srcDirs 'resources'
        }
        test {
            java.srcDirs = ['test/java', 'Test/java']
            kotlin.srcDirs 'test/kotlin'
            resources.srcDir 'test/resources'
        }
    }
}

def mainProjects = [project(':'), project(':idea'), project(':rider')]

configure(mainProjects) {
    apply plugin: 'org.jetbrains.intellij'

    group 'com.microsoft.azuretools'

    compileJava {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion

        doFirst {
            println "JDK = ${org.gradle.internal.jvm.Jvm.current()}"
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = javaVersion
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = javaVersion
    }

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    intellij {
        switch (build_common_code_with) {
            case 'rider':
                version = rider_version
                logger.lifecycle("COMMON_SDK=$rider_version")
                break
            case 'idea':
                version = idea_version
                logger.lifecycle("COMMON_SDK=$idea_version")
                break
            default:
                throw new Exception("Unsupported value for build_common_code_with: " + build_common_code_with)
        }

        updateSinceUntilBuild = Boolean.valueOf(updateVersionRange)
        downloadSources = Boolean.valueOf(sources)
    }

    runIde {
        jvmArgs '-Xmx2048m'
    }

    instrumentCode {
        // javac2 is required to compile .form files from IntelliJ IDEA UI Designer
        // Since Rider distribution does not contain it, take it from IDEA
        javac2 {
            "${project(":idea").extensions.getByName("intellij").ideaDependency.classes}/lib/javac2.jar"
        }
    }

    test {
        testLogging.showStandardStreams = true
        testLogging {
            events "passed", "skipped", "failed"
        }
        testLogging.exceptionFormat "full"
    }
}

defaultTasks 'buildPlugin', 'test'

buildSearchableOptions.onlyIf { false }
