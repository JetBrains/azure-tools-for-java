sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

        kotlin.srcDirs = ['test-integration']
        resources.srcDirs = ['test-integration/resources']
    }
}

dependencies {
    compile rootProject
    compile "org.java-websocket:Java-WebSocket:$web_socket_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testImplementation rootProject
}

configurations {
    testArtifacts

    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

prepareSandbox {
    tasks.findByPath(":rider:buildReSharperPlugin").collect {
        from(it, { into("${intellij.pluginName}/dotnet") })
    }
}

ext.resharperPluginPath = new File(projectDir, 'ReSharper.Azure')

apply plugin: 'org.jetbrains.intellij'
apply from: 'backend.gradle'

if (!ext.has('BuildNumber'))
    ext.BuildNumber = buildNumber

version "$BuildNumber"
logger.lifecycle("version=$version")
println "##teamcity[buildNumber '$version']"

def extensionsFrom = 'resources/dotnet'

intellij {
    pluginName = 'azure-toolkit-for-rider'
    version = rider_version

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    def extraPlugins = [ "rider-plugins-appender" ]
    plugins = [ 'DatabaseTools', 'JavaScriptLanguage', 'terminal', 'restClient' ] + extraPlugins

    downloadSources = Boolean.valueOf(sources)
}

tasks.withType(prepareSandbox.class).configureEach {
    dependsOn buildReSharperPlugin

    from(extensionsFrom, { into "${intellij.pluginName}/dotnet" })
    from(buildReSharperPlugin.outputs, { into "${intellij.pluginName}/dotnet" })
}

buildSearchableOptions.onlyIf { false }

patchPluginXml {
    sinceBuild = patchPluginXmlSinceBuild
}

test {
    dependsOn ':rider:buildPlugin'
    useTestNG()
}

task integrationTest(type: Test) {
    description = "Rider Azure integration tests based on Rider Test Framework."
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    dependsOn ':rider:buildPlugin'

    environment("LOCAL_ENV_RUN", rider_test_local_env_run)
    environment("NO_FS_ROOTS_ACCESS_CHECK", true)
    useTestNG()

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    doFirst {
        println "JDK = ${org.gradle.internal.jvm.Jvm.current()}"
        println "RD = ${intellij.version}"
        println "LOCAL_ENV_RUN = $rider_test_local_env_run"
    }
}

clean {
    dependsOn cleanBackend, ':rider:protocol:cleanProtocolModels'
}

jar {
    dependsOn ':rider:protocol:generateModel'
}
