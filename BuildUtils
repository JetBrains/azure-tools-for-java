#!/bin/bash

tc_open() {
    set +x
    echo "##teamcity[blockOpened name='$1' description='$1']"
    set -x
}

tc_close() {
    set +x
    echo "##teamcity[blockClosed name='$1']"
    set -x
}

set -e

# echo shell commands when they are executed.
set -x

tc_open "Initializing build script"
{
    SCRIPTPATH=$(pwd -P)
    cd "$SCRIPTPATH"

    MAVEN_QUIET=""

    SKIP_CHECKSTYLE=$TRAVIS

    while getopts ":hqB" option; do
        case $option in
            h) echo "usage: $0 [-h] [-q] [-B]"; exit ;;
            q) MAVEN_QUIET="-q" ;;
            B) MAVEN_QUIET="--batch-mode" ;;
            ?) echo "error: option -$OPTARG is not implemented"; exit ;;
        esac
    done

    SPARK_OUT_DIR="$SCRIPTPATH/PluginsAndFeatures/azure-toolkit-for-intellij/resources/spark/"
    if [ ! -d "$SPARK_OUT_DIR" ]; then
      echo "Creating spark output directories $SPARK_OUT_DIR"
      mkdir -p "$SPARK_OUT_DIR"
    fi

    ARTIFACTS_DIR="$SCRIPTPATH"/artifacts
    if [ ! -d  "$ARTIFACTS_DIR" ]; then
        echo "Creating artifacts directory $ARTIFACTS_DIR"
        mkdir -p "$ARTIFACTS_DIR"
    fi

    MAVEN_LOCAL_DIR="$SCRIPTPATH"/.repository
    if [ -d "$MAVEN_LOCAL_DIR" ]; then
        echo "Found existing Maven local repository in '$MAVEN_LOCAL_DIR'. Deleting..."
        rm -rf "$MAVEN_LOCAL_DIR"
    fi
    echo "Creating Maven local repository '$MAVEN_LOCAL_DIR'"
    mkdir -p "$MAVEN_LOCAL_DIR"

    df -h
}
tc_close "Initializing build script"

tc_open "Building Utils"
{
    mvn install -B -f "$SCRIPTPATH"/Utils/pom.xml -Dmaven.repo.local="$MAVEN_LOCAL_DIR" -Dcheckstyle.skip="$SKIP_CHECKSTYLE" $MAVEN_QUIET
    mvn install -B -f "$SCRIPTPATH"/PluginsAndFeatures/AddLibrary/AzureLibraries/pom.xml -Dmaven.repo.local="$MAVEN_LOCAL_DIR" $MAVEN_QUIET
    df -h
}
tc_close "Building Utils"

collect_spark_artifacts() {
    set +x

    local sparkToolsDir="$ARTIFACTS_DIR"/spark-tools
    mkdir -p "$sparkToolsDir"
    cp "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij/resources/spark/spark-tools-0.1.1_2.1.jar "$sparkToolsDir"
    cp "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij/resources/spark/spark-tools-0.1.1_2.3.0.jar "$sparkToolsDir"
    cp "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij/resources/spark/spark-tools-0.1.1_2.3.2.jar "$sparkToolsDir"

    set -x
}

collect_applicationinsights_artifacts() {
    set +x

    local libDir="$ARTIFACTS_DIR"/lib
    mkdir -p "$libDir"
    cp "$SCRIPTPATH"/Utils/lib/applicationinsights-management-1.0.3.jar "$libDir"

    set -x
}

collect_maven_local_repository_artifacts() {
    set +x

    local artifactsRepositoryDir="$ARTIFACTS_DIR"/repository
    mkdir -p "$artifactsRepositoryDir"
    cp -r "$MAVEN_LOCAL_DIR" "$artifactsRepositoryDir"

    set -x
}

collect_azure_sdk_dependencies_artifacts() {
    set +x

    local artifactsSdkDir="$ARTIFACTS_DIR"/azure-sdk
    mkdir -p "$artifactsSdkDir"

    local sdkDependenciesDir="$SCRIPTPATH"/PluginsAndFeatures/AddLibrary/AzureLibraries/com.microsoft.azuretools.sdk/dependencies
    cp -r "$sdkDependenciesDir" "$artifactsSdkDir"

    set -x
}

tc_open "Collect Utils artifacts"
{
    collect_spark_artifacts
    collect_applicationinsights_artifacts
    collect_maven_local_repository_artifacts
    collect_azure_sdk_dependencies_artifacts

    df -h
}
tc_close "Publish Utils artifacts"

echo "ALL BUILD SUCCESSFUL"
