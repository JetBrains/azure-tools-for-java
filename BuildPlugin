#!/bin/bash

tc_open() {
    set +x
    echo "##teamcity[blockOpened name='$1' description='$1']"
    set -x
}

tc_close() {
    set +x
    echo "##teamcity[blockClosed name='$1']"
    set -x
}

set -e

# echo shell commands when they are executed.
set -x

tc_open "Initializing build script"
{
    BUILD_COUNTER="9999"

    SCRIPTPATH=$(pwd -P)
    echo "Script path: $SCRIPTPATH"
    cd "$SCRIPTPATH"

    MAVEN_QUIET=""

    BUILD_ECLIPSE=true
    BUILD_INTELLIJ=true
    BUILD_RIDER=true

    INJECT_INTELLIJ_VERSION=false

    IJ_VERSION_MAJOR_BUILD=211
    IJ_VERSION_MAJOR=2021.2
    IJ_VERSION_MINOR=
    IJ_VERSION_LATEST=$IJ_VERSION_MAJOR.$IJ_VERSION_MINOR \
                      && [[ -z $IJ_VERSION_MINOR ]] && IJ_VERSION_LATEST=$IJ_VERSION_MAJOR
    IJ_SCALA_VERSION_LATEST=2021.2.9

    while getopts ":hqvBC:e:" option; do
        case $option in
            h) echo "usage: $0 [-h] [-q] [-v] [-B] [-C BuildCounter] [-e eclipse/intellij/rider]"; exit ;;
            q) MAVEN_QUIET="-q" ;;
            v) INJECT_INTELLIJ_VERSION=true ;;
            B) MAVEN_QUIET="--batch-mode" ;;
            C) BUILD_COUNTER="$OPTARG" ;;
            e)
              shopt -s nocasematch
              case $OPTARG in
                eclipse) BUILD_ECLIPSE=false ;;
                intellij) BUILD_INTELLIJ=false ;;
                rider) BUILD_RIDER=false ;;
              esac ;;
            ?) echo "error: option -$OPTARG is not implemented"; exit ;;
        esac
    done

    BUILD_NUMBER="3.50.0.$BUILD_COUNTER-2021.2"
    BUILD_CONFIGURATION=Release

    MAVEN_LOCAL_DIR="$SCRIPTPATH"/.repository
    if [ -d "$MAVEN_LOCAL_DIR" ]; then
        echo "Found existing Maven local repository in '$MAVEN_LOCAL_DIR'. Deleting..."
        rm -rf "$MAVEN_LOCAL_DIR"
    fi
    echo "Creating maven local directory $MAVEN_LOCAL_DIR"
    mkdir -p "$MAVEN_LOCAL_DIR"

    # Plugin Artifacts
    ARTIFACTS_DIR="$SCRIPTPATH/artifacts"
    if [ ! -d "$ARTIFACTS_DIR" ]; then
        echo "Creating artifacts directory $ARTIFACTS_DIR"
        mkdir -p "$ARTIFACTS_DIR"
    fi

    # Utils Artifacts
    UTILS_ARTIFACTS_DIR="$SCRIPTPATH/utilsArtifacts"
    if [ ! -d "$UTILS_ARTIFACTS_DIR" ]; then
        echo "Unable to find Utils artifacts directory: '$UTILS_ARTIFACTS_DIR'"
        exit 1
    fi

    UTILS_ARTIFACTS_COMMON_DIR="$UTILS_ARTIFACTS_DIR"/common
    if [ ! -d "$UTILS_ARTIFACTS_COMMON_DIR" ]; then
        echo "Unable to find Utils artifacts common directory: '$UTILS_ARTIFACTS_COMMON_DIR'"
        exit 1
    fi

    df -h
}
tc_close "Initializing build script"

prepare_maven_repository() {
    set +x
    cp -r "$UTILS_ARTIFACTS_COMMON_DIR"/maven_local/.repository "$SCRIPTPATH"
    set -x
}

prepare_spark_jars() {
    set +x
    local sparkResourceDir="$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij/resources/spark/
    cp "$UTILS_ARTIFACTS_COMMON_DIR"/spark/spark-tools-*.jar "$sparkResourceDir"
    set -x
}

tc_open "Prepare JAR dependencies"
{
    prepare_maven_repository
    prepare_spark_jars

    echo "Deleting Utils artifacts folder"
    rm -rf "$UTILS_ARTIFACTS_DIR"
}
tc_close "Prepare JAR dependencies"

if $BUILD_ECLIPSE; then
    tc_open "Building Eclipse plugin"
    {
        mvn clean install -B -f "$SCRIPTPATH"/PluginsAndFeatures/AddLibrary/AzureLibraries/pom.xml -Dmaven.repo.local="$MAVEN_LOCAL_DIR" $MAVEN_QUIET
        mvn clean install -B -f "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-eclipse/pom.xml $MAVEN_QUIET
        rm -rf "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-eclipse/
        df -h
    }
    tc_close "Building Eclipse plugin"
fi

if $BUILD_INTELLIJ; then
    tc_open "Building IDEA plugin"
    {
        (cd "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew --info clean --console=plain)
        (cd "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew && ./gradlew --info --rerun-tasks :idea:buildPlugin -s -Pbuild_common_code_with=idea -PBuildNumber=$BUILD_NUMBER -PBuildConfiguration=$BUILD_CONFIGURATION --console=plain)
        rm -rf "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij/idea/build/
        df -h
    }
    tc_close "Building IDEA plugin"
fi

if $BUILD_RIDER; then
    tc_open "Building Rider plugin"
    {
        (cd "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew --info --rerun-tasks :rider:buildPlugin -s -Pbuild_common_code_with=rider -PBuildNumber=$BUILD_NUMBER -PBuildConfiguration=$BUILD_CONFIGURATION --console=plain)
        cp "$SCRIPTPATH"/PluginsAndFeatures/azure-toolkit-for-intellij/rider/build/distributions/azure-toolkit-for-rider-"$BUILD_NUMBER".zip "$ARTIFACTS_DIR"/azure-toolkit-for-rider-"$BUILD_NUMBER".zip
        df -h
    }
    tc_close "Building Rider plugin"
fi

echo "ALL BUILD SUCCESSFUL"
