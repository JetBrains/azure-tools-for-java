#!/bin/bash

tc_open() {
    set +x
    echo "##teamcity[blockOpened name='$1' description='$1']"
    set -x
}

tc_close() {
    set +x
    echo "##teamcity[blockClosed name='$1']"
    set -x
}

set -e

# echo shell commands when they are executed.
set -x

tc_open "Initializing build script"
{
    BUILD_COUNTER="9999"

    SCRIPTPATH=$(pwd -P)
    cd "$SCRIPTPATH"

    MAVEN_QUIET=""
    # Utils
    SKIP_CHECKSTYLE=$TRAVIS

    # Eclipse
    BUILD_ECLIPSE=true

    #IntelliJ
    BUILD_INTELLIJ=true
    INJECT_INTELLIJ_VERSION=false

    IJ_VERSION_MAJOR_BUILD=201
    IJ_VERSION_MAJOR=2020.1
    IJ_VERSION_MINOR=
    IJ_VERSION_LATEST=$IJ_VERSION_MAJOR.$IJ_VERSION_MINOR \
                      && [[ -z $IJ_VERSION_MINOR ]] && IJ_VERSION_LATEST=$IJ_VERSION_MAJOR
    IJ_SCALA_VERSION_LATEST=2020.1.10

    while getopts ":hqvBC:e:" option; do
        case $option in
            h) echo "usage: $0 [-h] [-q] [-v] [-B] [-C BuildCounter] [-e eclipse/intellij]"; exit ;;
            q) MAVEN_QUIET="-q" ;;
            v) INJECT_INTELLIJ_VERSION=true ;;
            B) MAVEN_QUIET="--batch-mode" ;;
            C) BUILD_COUNTER="$OPTARG" ;;
            e)
              shopt -s nocasematch
              case $OPTARG in
                eclipse) BUILD_ECLIPSE=false ;;
                intellij) BUILD_INTELLIJ=false ;;
              esac ;;
            ?) echo "error: option -$OPTARG is not implemented"; exit ;;
        esac
    done

    ARTIFACTS_DIR="artifacts"
    # check dir exists
    if [ ! -d  "$ARTIFACTS_DIR" ]; then
        echo "Creating artifacts directory $ARTIFACTS_DIR"
        mkdir -p $ARTIFACTS_DIR
    fi
    df -h
}
tc_close "Initializing build script"

# Build Utils
tc_open "Building Utils"
{
    mvn install -B -f $SCRIPTPATH/Utils/pom.xml -Dmaven.repo.local=$SCRIPTPATH/.repository -Dcheckstyle.skip=$SKIP_CHECKSTYLE $MAVEN_QUIET
    mvn install -B -f $SCRIPTPATH/PluginsAndFeatures/AddLibrary/AzureLibraries/pom.xml -Dmaven.repo.local=$SCRIPTPATH/.repository $MAVEN_QUIET
    df -h
}
tc_close "Building Utils"

# Build Eclipse plugin
if $BUILD_ECLIPSE; then
  tc_open "Building Eclipse plugin"
  {
      mvn clean install -B -f $SCRIPTPATH/PluginsAndFeatures/azure-toolkit-for-eclipse/pom.xml $MAVEN_QUIET
      rm -rf ./PluginsAndFeatures/azure-toolkit-for-eclipse/
      df -h
  }
  tc_close "Building Eclipse plugin"
fi

# Build IntelliJ plugin
if $BUILD_INTELLIJ; then
  tc_open "Building IDEA plugin"
  {
      PATCH_PLUGIN_XML_ARGS="" \
        && [ $INJECT_INTELLIJ_VERSION == "true" ] && \
          PATCH_PLUGIN_XML_ARGS="-PpatchPluginXmlSinceBuild=$IJ_VERSION_MAJOR_BUILD"

      GRADLE_TASKS="clean buildPlugin bundleBuildIdeaZip"
      GRADLE_ARGS="-s -Pintellij_version=IC-$IJ_VERSION_LATEST -Pdep_plugins=org.intellij.scala:$IJ_SCALA_VERSION_LATEST $PATCH_PLUGIN_XML_ARGS"

      (cd PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew $GRADLE_TASKS $GRADLE_ARGS)

      (cd PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew --info clean --console=plain)
      (cd PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew --info :idea:buildPlugin -s -Pbuild_common_code_with=idea --console=plain)
      rm -rf ./PluginsAndFeatures/azure-toolkit-for-intellij/idea/build/
      df -h
  }
  tc_close "Building IDEA plugin"
fi

BUILD_NUMBER="3.35.0.$BUILD_COUNTER-2020.2"

# Build JetBrains Rider 2020.1 plugin
tc_open "Building Rider plugin"
{
    (cd PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew --info :rider:test -s --console=plain)
    # :rider:test task depends on :buildPlugin that prepare the plugin package.
    # When we run then :rider:buildPlugin Gradle task, some tasks (including a task that get outputs from backend compilation) are skipped.
    # TODO: Fix --rerun-tasks: split tests execution step from the build process.
    (cd PluginsAndFeatures/azure-toolkit-for-intellij && ./gradlew --info :rider:buildPlugin -s -Pbuild_common_code_with=rider -PBuildNumber=$BUILD_NUMBER --console=plain --rerun-tasks)
    cp ./PluginsAndFeatures/azure-toolkit-for-intellij/rider/build/distributions/azure-toolkit-for-rider-$BUILD_NUMBER.zip ./$ARTIFACTS_DIR/azure-toolkit-for-rider-$BUILD_NUMBER.zip
    df -h
}
tc_close "Building Rider plugin"

echo "ALL BUILD SUCCESSFUL"
